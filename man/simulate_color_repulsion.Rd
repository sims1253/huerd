% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/repulsion.R
\name{simulate_color_repulsion}
\alias{simulate_color_repulsion}
\title{Simulate Color Repulsion in LAB Space}
\usage{
simulate_color_repulsion(
  n_colors,
  max_iterations = 100,
  learning_rate = 1,
  base_colors = NULL,
  save_every = 5,
  boundary_force = 1,
  return_states = FALSE
)
}
\arguments{
\item{n_colors}{Number of colors to generate in the palette}

\item{max_iterations}{Maximum number of iterations for force simulation.
More iterations allow colors to spread out more but
increase computation time. Default: 100}

\item{learning_rate}{Controls magnitude of color movements per iteration.
Higher values mean larger movements but may cause
instability. Default: 50}

\item{base_colors}{Optional vector of fixed base colors in hex format
(e.g. "#FF0000"). These colors will remain unchanged
during optimization. Default: NULL}

\item{save_every}{Save state every n iterations for animation purposes.
Lower values capture more intermediate states but use more
memory. Default: 5}

\item{boundary_force}{Strength of force keeping colors in valid RGB space.
Higher values enforce RGB boundaries more strictly.
Default: 0.3}

\item{return_states}{If TRUE, returns list of states for animation. If FALSE,
returns only final state. Default: FALSE}
}
\value{
If return_states=FALSE, returns a matrix of LAB coordinates for the
final color palette. If return_states=TRUE, returns a list of
matrices containing LAB coordinates at each saved state.
}
\description{
Uses a force-directed layout algorithm to distribute colors evenly in LAB
color space. The algorithm works by:
\enumerate{
\item Initializing colors randomly in LAB space (or using provided base colors)
\item Simulating repulsive forces between colors to maximize perceptual
separation
\item Applying boundary forces to keep colors within valid RGB gamut
\item Iteratively updating color positions based on these forces
}
}
\details{
The force simulation helps achieve:
\itemize{
\item Maximum perceptual distinctness between colors
\item Even distribution across color space
\item Valid RGB colors that can be displayed
\item Preservation of any provided base colors
}
}
\examples{
# Generate 5 colors
colors <- simulate_color_repulsion(5)

# Generate 8 colors with 2 fixed base colors
base <- c("#FF0000", "#0000FF")
colors <- simulate_color_repulsion(8, base_colors = base)

# Get animation states for 6 colors
states <- simulate_color_repulsion(6,
  max_iterations = 50,
  save_every = 2,
  return_states = TRUE
)
}
