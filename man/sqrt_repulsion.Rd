% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sqrt_repulsion.R
\name{sqrt_repulsion}
\alias{sqrt_repulsion}
\title{Optimize Color Distribution Using Repulsion Forces}
\usage{
sqrt_repulsion(
  n_colors,
  max_iterations = 5000,
  base_colors = NULL,
  save_every = 5,
  color_force_factor = 200,
  boundary_force_factor = 400,
  center_force_factor = 150,
  return_states = FALSE,
  convergence_threshold = NULL,
  min_iterations = 100
)
}
\arguments{
\item{n_colors}{Integer. Total number of colors to generate. Must be >= 1.}

\item{max_iterations}{Integer. Maximum number of iterations for the optimization
process. Default: 5000. Must be >= 1.}

\item{base_colors}{Character vector. Optional fixed colors in hex format (e.g. "#FF0000")
that will be included in the palette and used as anchor points. Length must be
less than n_colors.}

\item{save_every}{Integer. Interval for saving intermediate states. Default: 5.
Must be >= 1. Smaller values increase memory usage but provide more detailed
animation data.}

\item{color_force_factor}{Numeric. Strength of repulsion between colors. Default: 200.
Must be positive. Higher values create more separation between colors.}

\item{boundary_force_factor}{Numeric. Strength of repulsion from LAB boundaries.
Default: 400. Must be positive.}

\item{center_force_factor}{Numeric. Strength of repulsion from the LAB center.
Default: 150. Must be positive.}

\item{return_states}{Logical. If TRUE, returns all intermediate states for animation.
If FALSE, returns only the final state. Default: FALSE.}

\item{convergence_threshold}{Numeric. Movement threshold for convergence. If NULL,
automatically calculated based on n_colors. Must be positive.}

\item{min_iterations}{Integer. Minimum number of iterations before convergence
checking begins. Default: 100. Must be >= 1.}
}
\value{
If return_states is FALSE, returns a matrix of final color positions in LAB
space (n_colors x 3). If return_states is TRUE, returns a list of matrices
representing the color positions at each saved state.
}
\description{
This function implements a color repulsion algorithm in the CIELAB color space to
generate visually distinct color sets. It uses a physics-inspired approach where
colors repel each other while being constrained within the LAB color boundaries.
The algorithm is particularly useful for generating color palettes where maximum
perceptual difference between colors is desired.
}
\examples{
# Generate 10 distinct colors
colors <- sqrt_repulsion(n_colors = 10)

# Generate colors with 2 fixed base colors
colors <- sqrt_repulsion(n_colors = 10, base_colors = c("#FF0000", "#00FF00"))

# Get animation states for visualization
states <- sqrt_repulsion(n_colors = 5, return_states = TRUE, save_every = 10)
}
