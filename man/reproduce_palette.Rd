% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_palette.R
\name{reproduce_palette}
\alias{reproduce_palette}
\title{Reproduce Palette from Existing huerd_palette Object}
\usage{
reproduce_palette(palette, progress = NULL)
}
\arguments{
\item{palette}{A huerd_palette object (result from \code{generate_palette()})
containing generation metadata.}

\item{progress}{Logical. Show progress messages. Default is \code{interactive()}.
If NULL, uses the progress setting from the original generation.}
}
\value{
A character vector of hex colors with class \code{huerd_palette},
identical to the input palette when reproduction is successful.
}
\description{
Recreates an identical color palette from a previously generated huerd_palette
object using the stored generation metadata.
}
\details{
This function reads the generation metadata stored in the \code{generation_metadata}
attribute of a huerd_palette object and re-runs \code{generate_palette()} with
the exact same parameters. When a random seed was captured during original
generation, the reproduction will be identical if the optimizer supports
the usage of a seed. For deterministic optimizers like "nlopt_direct",
reproduction should always be identical regardless of random seed.

The function validates that the input object contains the necessary metadata
and provides informative error messages if reproduction fails due to missing
metadata or package version incompatibilities.
}
\examples{
\dontrun{
# Create a reproducible palette
set.seed(42)
original_palette <- generate_palette(
  n = 5,
  include_colors = c("#FF0000"),
  optimizer = "nlopt_direct",
  progress = FALSE
)

# Reproduce the exact same palette
reproduced_palette <- reproduce_palette(original_palette)

# Verify they are identical
identical(original_palette, reproduced_palette)

# Examine generation metadata
metadata <- attr(original_palette, "generation_metadata")
str(metadata)
}

}
