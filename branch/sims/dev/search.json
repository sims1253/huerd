[{"path":"https://sims1253.github.io/huerd/branch/sims/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 huerd authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/articles/introduction-to-huerd.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to huerd","text":"huerd package provides scientifically-grounded approach generating categorical color palettes. uses pure minimax optimization algorithm perceptually uniform OKLAB color space create palettes maximally distinct colors. vignette walk core features huerd, basic palette generation -depth analysis.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/articles/introduction-to-huerd.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to huerd","text":"can install development version huerd GitHub :","code":"# install.packages(\"remotes\") # remotes::install_github(\"sims1253/huerd\")"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/articles/introduction-to-huerd.html","id":"basic-palette-generation","dir":"Articles","previous_headings":"","what":"Basic Palette Generation","title":"Introduction to huerd","text":"simplest way use huerd generate_palette() function. default, create palette specified size colors distinct possible. palettes automatically sorted brightness (lightness OKLAB space), making intuitive use.","code":"library(huerd)  # Generate a palette of 5 colors palette <- generate_palette(5, progress = FALSE) print(palette) #>  #> -- huerd Color Palette (5 colors) -- #> Colors: #> [ 1] #002B62 #> [ 2] #9900FF #> [ 3] #FF0041 #> [ 4] #FFCE00 #> [ 5] #00FFFF #>  #> -- Quality Metrics Summary -- #> * Min. Perceptual Distance (OKLAB): 0.264 #> * Optimizer Performance Ratio      : 64.2% #> * Min. CVD-Safe Distance (OKLAB)  : 0.227 #>  #> -- Generation Details -- #> * Optimizer Iterations: 307 #> * Optimizer Status: NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/articles/introduction-to-huerd.html","id":"constrained-palettes","dir":"Articles","previous_headings":"","what":"Constrained Palettes","title":"Introduction to huerd","text":"key feature huerd ability include fixed “brand” colors palette optimizing remaining colors around .","code":"# Generate a 6-color palette that must include a specific blue and orange brand_palette <- generate_palette(   n = 6,   include_colors = c(\"#4A6B8A\", \"#E5A04C\"),   progress = FALSE ) print(brand_palette) #>  #> -- huerd Color Palette (6 colors) -- #> Colors: #> [ 1] #4A3509 #> [ 2] #4A6B8A #> [ 3] #009AFF #> [ 4] #E5A04C #> [ 5] #00F2FF #> [ 6] #FFF662 #>  #> -- Quality Metrics Summary -- #> * Min. Perceptual Distance (OKLAB): 0.197 #> * Optimizer Performance Ratio      : 53.9% #> * Min. CVD-Safe Distance (OKLAB)  : 0.185 #>  #> -- Generation Details -- #> * Optimizer Iterations: 269 #> * Optimizer Status: NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/articles/introduction-to-huerd.html","id":"palette-analysis","dir":"Articles","previous_headings":"","what":"Palette Analysis","title":"Introduction to huerd","text":"huerd includes powerful tools analyzing quality palettes.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/articles/introduction-to-huerd.html","id":"evaluate_palette","dir":"Articles","previous_headings":"Palette Analysis","what":"evaluate_palette()","title":"Introduction to huerd","text":"evaluate_palette() function provides detailed, quantitative assessment palette’s properties. function returns wealth information, including: Perceptual Distances: Minimum, mean, statistics distances colors. CVD Safety: palette performs simulated color vision deficiency. Color Distribution: Statistics spread lightness, chroma, hue.","code":"# Evaluate the brand palette we just created evaluation <- evaluate_palette(brand_palette) print(evaluation) #>  #> -- huerd Palette Evaluation (6 colors) -- #>  #> -- Perceptual Distances (OKLAB) -- #> * Min distance       : 0.1969 #> * Mean distance      : 0.3562 #> * Median distance    : 0.3232 #> * Std. Dev.          : 0.1313 #> * Estimated Max Min  : 0.3655 (for unconstrained palette of this size) #> * Performance Ratio  : 53.9% (achieved min / estimated max) #>  #> -- CVD Safety (OKLAB distances under simulation) -- #> * Worst-case min dist: 0.1851 #>   Protanopia : min=0.204, preserved_ratio=1.04 #>   Deuteranopia: min=0.185, preserved_ratio=0.94 #>   Tritanopia : min=0.186, preserved_ratio=0.94 #>  #> -- Color Distribution (OKLAB) -- #> * Lightness (L)    : range=[0.34, 0.95], mean=0.69 #> * Chroma (C)       : range=[0.063, 0.183], mean=0.126 #> * Hue (degrees)    : circular_variance=0.737"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/articles/introduction-to-huerd.html","id":"plot_palette_analysis","dir":"Articles","previous_headings":"Palette Analysis","what":"plot_palette_analysis()","title":"Introduction to huerd","text":"visual analysis, plot_palette_analysis() function creates comprehensive dashboard.  dashboard provides six key visualizations: Color Swatches: overview palette key metrics. Pairwise Distance Matrix: heatmap showing perceptual distance every pair colors. Nearest Neighbor Distances: bar chart showing distinct color closest neighbor. OKLAB Color Space: projection colors *b* plane OKLAB space. CVD Simulation: palette appears individuals three common types color vision deficiency. Comparative Palettes: comparison palette’s distance distribution established palettes like Viridis Set2.","code":"# Create the diagnostic dashboard plot_palette_analysis(brand_palette)"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/articles/introduction-to-huerd.html","id":"cvd-accessibility","dir":"Articles","previous_headings":"","what":"CVD Accessibility","title":"Introduction to huerd","text":"huerd provides two main tools working CVD.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/articles/introduction-to-huerd.html","id":"is_cvd_safe","dir":"Articles","previous_headings":"CVD Accessibility","what":"is_cvd_safe()","title":"Introduction to huerd","text":"function provides simple, programmatic check see palette meets minimum threshold CVD safety.","code":"is_cvd_safe(brand_palette) #> [1] TRUE"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/articles/introduction-to-huerd.html","id":"simulate_palette_cvd","dir":"Articles","previous_headings":"CVD Accessibility","what":"simulate_palette_cvd()","title":"Introduction to huerd","text":"function allows see palette appear individuals different types CVD.","code":"# Simulate the appearance for all CVD types cvd_simulation <- simulate_palette_cvd(brand_palette, cvd_type = \"all\") print(cvd_simulation) #>  #> -- huerd CVD Simulation Result (Multiple Types, Severity: 1.00) -- #> Palette for: original #>   [ 1] #4A3509 #>   [ 2] #4A6B8A #>   [ 3] #009AFF #>   [ 4] #E5A04C #>   [ 5] #00F2FF #>   [ 6] #FFF662 #> Palette for: protan #>   [ 1] #3D3503 #>   [ 2] #5E6C8B #>   [ 3] #67A0FF #>   [ 4] #B7A443 #>   [ 5] #DEE7FF #>   [ 6] #FFEE50 #> Palette for: deutan #>   [ 1] #423B0B #>   [ 2] #566589 #>   [ 3] #3F8DFD #>   [ 4] #C7B54E #>   [ 5] #C1D2FF #>   [ 6] #FFF46B #> Palette for: tritan #>   [ 1] #512F2D #>   [ 2] #307275 #>   [ 3] #00B3C0 #>   [ 4] #F98F8E #>   [ 5] #00FCF6 #>   [ 6] #FFE7D7"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/articles/introduction-to-huerd.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to huerd","text":"vignette covered core functionality huerd package. combining pure minimax optimization comprehensive analysis tools, huerd provides powerful flexible solution creating high-quality, accessible color palettes.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maximilian Scholz. Author, maintainer.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Scholz M (2025). huerd: Color Palette Optimization fixed colors. R package version 0.4.0, https://github.com/sims1253/huerd.","code":"@Manual{,   title = {huerd: Color Palette Optimization with fixed colors},   author = {Maximilian Scholz},   year = {2025},   note = {R package version 0.4.0},   url = {https://github.com/sims1253/huerd}, }"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/index.html","id":"huerd-","dir":"","previous_headings":"","what":"Color Palette Optimization with fixed colors","title":"Color Palette Optimization with fixed colors","text":"discrete color palette generator support fixed colors, optimized color vision deficient viewers. Features different optimization algorithms multi-objective optimization framework advanced color palette generation.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Color Palette Optimization with fixed colors","text":"can install development version huerd GitHub :","code":"# install.packages(\"pak\") pak::pak(\"sims1253/huerd\")"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/index.html","id":"basic-example","dir":"","previous_headings":"","what":"Basic Example","title":"Color Palette Optimization with fixed colors","text":"Generate palette 5 colors:","code":"library(huerd)  palette <- generate_palette(8, progress = FALSE) print(palette) #>  #> -- huerd Color Palette (8 colors) -- #> Colors: #> [ 1] #6C0000 #> [ 2] #007F77 #> [ 3] #0084FF #> [ 4] #FF0000 #> [ 5] #E900FF #> [ 6] #9792B2 #> [ 7] #00B1EA #> [ 8] #00DBFF #>  #> -- Quality Metrics Summary -- #> * Min. Perceptual Distance (OKLAB): 0.115 #> * Optimizer Performance Ratio      : 37.0% #> * Min. CVD-Safe Distance (OKLAB)  : 0.066 #>  #> -- Generation Details -- #> * Optimizer Iterations: 487 #> * Optimizer Status: NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/index.html","id":"constrained-color-palettes","dir":"","previous_headings":"","what":"Constrained Color Palettes","title":"Color Palette Optimization with fixed colors","text":"Include specific colors optimizing remaining colors:","code":"library(huerd)  palette <- generate_palette(   n = 8,   include_colors = c(\"#4A6B8A\", \"#E5A04C\"),   progress = FALSE ) print(palette) #>  #> -- huerd Color Palette (8 colors) -- #> Colors: #> [ 1] #700000 #> [ 2] #114661 #> [ 3] #A73800 #> [ 4] #4A6B8A #> [ 5] #CE673B #> [ 6] #00AAAD #> [ 7] #E5A04C #> [ 8] #FFC7D8 #>  #> -- Quality Metrics Summary -- #> * Min. Perceptual Distance (OKLAB): 0.132 #> * Optimizer Performance Ratio      : 42.7% #> * Min. CVD-Safe Distance (OKLAB)  : 0.130 #>  #> -- Generation Details -- #> * Optimizer Iterations: 533 #> * Optimizer Status: NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/index.html","id":"multi-optimizer-support","dir":"","previous_headings":"","what":"Multi-Optimizer Support","title":"Color Palette Optimization with fixed colors","text":"Choose 4 different optimization algorithms based needs:","code":"library(huerd)  # COBYLA: Default deterministic optimizer for general use cobyla_palette <- generate_palette(6, optimizer = \"nloptr_cobyla\", progress = FALSE)  # SANN: Stochastic simulated annealing for higher quality sann_palette <- generate_palette(6, optimizer = \"sann\", progress = FALSE)  # DIRECT: Global optimization for reproducibility (may need tuning) direct_palette <- generate_palette(6, optimizer = \"nlopt_direct\", progress = FALSE)  # Nelder-Mead: Derivative-free local optimization # As an alternative deterministic approach neldermead_palette <- generate_palette(6, optimizer = \"nlopt_neldermead\", progress = FALSE)  cat(\"COBYLA:\", paste(cobyla_palette, collapse = \", \"), \"\\n\") #> COBYLA: #2600BA, #970000, #0000FF, #008A00, #FF0000, #BAA69E cat(\"SANN:\", paste(sann_palette, collapse = \", \"), \"\\n\") #> SANN: #300000, #6E0000, #0000D7, #00A100, #CE74FF, #00FFFF cat(\"DIRECT:\", paste(direct_palette, collapse = \", \"), \"\\n\") #> DIRECT: #636363, #636363, #636363, #636363, #636363, #636363 cat(\"Nelder-Mead:\", paste(neldermead_palette, collapse = \", \"), \"\\n\") #> Nelder-Mead: #9D0000, #FF0000, #FF77C5, #A7C100, #FFB8A2, #00FBFF"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/index.html","id":"multi-objective-framework","dir":"","previous_headings":"","what":"Multi-Objective Framework","title":"Color Palette Optimization with fixed colors","text":"package includes multi-objective optimization framework:","code":"library(huerd)  # Current: Pure distance optimization (default) distance_palette <- generate_palette(   n = 6,   weights = c(distance = 1),  # Explicit distance weighting   optimizer = \"nloptr_cobyla\",   progress = FALSE )  # Future versions will support additional objectives like: # weights = c(distance = 0.7, aesthetics = 0.3) # weights = c(distance = 0.8, uniformity = 0.2)  print(distance_palette) #>  #> -- huerd Color Palette (6 colors) -- #> Colors: #> [ 1] #001E00 #> [ 2] #A50000 #> [ 3] #FF0000 #> [ 4] #00A5FF #> [ 5] #00FFFF #> [ 6] #FFF300 #>  #> -- Quality Metrics Summary -- #> * Min. Perceptual Distance (OKLAB): 0.189 #> * Optimizer Performance Ratio      : 51.6% #> * Min. CVD-Safe Distance (OKLAB)  : 0.136 #>  #> -- Generation Details -- #> * Optimizer Iterations: 329 #> * Optimizer Status: NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/index.html","id":"diagnostic-dashboard","dir":"","previous_headings":"","what":"Diagnostic Dashboard","title":"Color Palette Optimization with fixed colors","text":"Get quick overview palette properties:","code":"library(huerd)  palette <- generate_palette(8, progress = FALSE) plot_palette_analysis(palette, force_font_scale = 0.6)"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/index.html","id":"palette-quality-evaluation","dir":"","previous_headings":"","what":"Palette Quality Evaluation","title":"Color Palette Optimization with fixed colors","text":"look numerical evaluation results:","code":"library(huerd)  palette <- generate_palette(8, progress = FALSE) evaluation <- evaluate_palette(palette)  # Access raw metrics (no subjective scoring) cat(\"Minimum distance:\", evaluation$distances$min, \"\\n\") #> Minimum distance: 0.2073131 cat(\"Performance ratio:\", evaluation$distances$performance_ratio * 100, \"%\\n\") #> Performance ratio: 66.9047 % cat(\"CVD worst case:\", evaluation$cvd_safety$worst_case_min_distance, \"\\n\") #> CVD worst case: 0.08815642"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/index.html","id":"custom-parameters","dir":"","previous_headings":"","what":"Custom Parameters","title":"Color Palette Optimization with fixed colors","text":"Fine-tune generation process advanced options:","code":"library(huerd)  palette <- generate_palette(   n = 8,   initialization = \"harmony\",              # Color harmony-based initialization   init_lightness_bounds = c(0.3, 0.8),    # Constrain lightness range   max_iterations = 2000,                   # Increased iterations   optimizer = \"nloptr_cobyla\",             # Use COBYLA for optimization   progress = FALSE ) print(palette) #>  #> -- huerd Color Palette (8 colors) -- #> Colors: #> [ 1] #CE4572 #> [ 2] #00AC8F #> [ 3] #00BACF #> [ 4] #A6AF5F #> [ 5] #B9AFFC #> [ 6] #D0BE8F #> [ 7] #FFB9E7 #> [ 8] #67FFA4 #>  #> -- Quality Metrics Summary -- #> * Min. Perceptual Distance (OKLAB): 0.093 #> * Optimizer Performance Ratio      : 29.9% #> * Min. CVD-Safe Distance (OKLAB)  : 0.065 #>  #> -- Generation Details -- #> * Optimizer Iterations: 573 #> * Optimizer Status: NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/index.html","id":"complete-workflow-example","dir":"","previous_headings":"","what":"Complete Workflow Example","title":"Color Palette Optimization with fixed colors","text":"","code":"library(huerd)  # 1. Generate brand palette with advanced optimization brand_palette <- generate_palette(   n = 8,   include_colors = c(\"#1f77b4\", \"#ff7f0e\"),  # Fixed brand colors   fixed_aesthetic_influence = 0.9,   initialization = \"harmony\",   optimizer = \"sann\",   max_iterations = 5000,   weights = c(distance = 1),   return_metrics = TRUE,   progress = TRUE ) #> Preparing for palette generation... #> Adapting initialization from fixed colors' aesthetics... #> Initializing 6 free colors (method: harmony)... #> Optimizing 6 free colors using sann... #> Finalizing palette... #> Done.  # 2. Diagnostic analysis plot_palette_analysis(brand_palette, force_font_scale = 0.6) # 3. Quality evaluation evaluation <- evaluate_palette(brand_palette) cat(\"Min distance:\", round(evaluation$distances$min, 3), \"\\n\") #> Min distance: 0.18 cat(\"Performance:\", round(evaluation$distances$performance_ratio * 100, 1), \"%\\n\") #> Performance: 57.9 %  # 4. CVD accessibility check cvd_safe <- is_cvd_safe(brand_palette) if (cvd_safe) {   cat(\"Palette is CVD-accessible\\n\") } else {   cat(\"Palette may challenge CVD viewers\\n\") } #> Palette is CVD-accessible  # 5. CVD simulation for verification cvd_simulation <- simulate_palette_cvd(brand_palette, cvd_type = \"all\") print(cvd_simulation) #>  #> -- huerd CVD Simulation Result (Multiple Types, Severity: 1.00) -- #> Palette for: original #>   [ 1] #450000 #>   [ 2] #005800 #>   [ 3] #3100DD #>   [ 4] #1F77B4 #>   [ 5] #FF0055 #>   [ 6] #FF7F0E #>   [ 7] #F5B7FF #>   [ 8] #45FF00 #> Palette for: protan #>   [ 1] #181400 #>   [ 2] #5A4E00 #>   [ 3] #004EE2 #>   [ 4] #5A79B7 #>   [ 5] #666355 #>   [ 6] #A59100 #>   [ 7] #B0C8FF #>   [ 8] #FFE600 #> Palette for: deutan #>   [ 1] #292300 #>   [ 2] #52480D #>   [ 3] #003ADA #>   [ 4] #456CB3 #>   [ 5] #9F914E #>   [ 6] #C4AE05 #>   [ 7] #BECFFD #>   [ 8] #F1D83A #> Palette for: tritan #>   [ 1] #4D0001 #>   [ 2] #005549 #>   [ 3] #005B81 #>   [ 4] #00868D #>   [ 5] #FF0032 #>   [ 6] #FF616D #>   [ 7] #F7BED1 #>   [ 8] #00F7D9  # 6. Display final palette (colors are brightness-sorted) print(brand_palette) #>  #> -- huerd Color Palette (8 colors) -- #> Colors: #> [ 1] #450000 #> [ 2] #005800 #> [ 3] #3100DD #> [ 4] #1F77B4 #> [ 5] #FF0055 #> [ 6] #FF7F0E #> [ 7] #F5B7FF #> [ 8] #45FF00 #>  #> -- Quality Metrics Summary -- #> * Min. Perceptual Distance (OKLAB): 0.180 #> * Optimizer Performance Ratio      : 57.9% #> * Min. CVD-Safe Distance (OKLAB)  : 0.093 #>  #> -- Generation Details -- #> * Optimizer Iterations: 5000 #> * Optimizer Status: Optimization converged"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/evaluate_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Palette Quality — evaluate_palette","title":"Evaluate Palette Quality — evaluate_palette","text":"Provides comprehensive evaluation color palette's perceptual properties, including distinguishability, CVD safety, color distribution. Returns raw metrics without subjective scoring post-hoc analysis.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/evaluate_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Palette Quality — evaluate_palette","text":"","code":"evaluate_palette(colors)"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/evaluate_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Palette Quality — evaluate_palette","text":"colors character vector hex colors, matrix colors OK LAB space.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/evaluate_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Palette Quality — evaluate_palette","text":"list evaluation metrics class huerd_evaluation. Contains raw metrics including distances, CVD safety, distribution objective analysis without subjective heuristic scoring.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/evaluate_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Palette Quality — evaluate_palette","text":"","code":"pal <- generate_palette(5, progress = FALSE) metrics <- evaluate_palette(pal) print(metrics) # Uses custom print method #>  #> -- huerd Palette Evaluation (5 colors) -- #>  #> -- Perceptual Distances (OKLAB) -- #> * Min distance       : 0.2980 #> * Mean distance      : 0.4324 #> * Median distance    : 0.4158 #> * Std. Dev.          : 0.1187 #> * Estimated Max Min  : 0.4108 (for unconstrained palette of this size) #> * Performance Ratio  : 72.5% (achieved min / estimated max) #>  #> -- CVD Safety (OKLAB distances under simulation) -- #> * Worst-case min dist: 0.2303 #>   Protanopia : min=0.240, preserved_ratio=0.81 #>   Deuteranopia: min=0.233, preserved_ratio=0.78 #>   Tritanopia : min=0.230, preserved_ratio=0.77 #>  #> -- Color Distribution (OKLAB) -- #> * Lightness (L)    : range=[0.34, 0.96], mean=0.61 #> * Chroma (C)       : range=[0.036, 0.253], mean=0.157 #> * Hue (degrees)    : circular_variance=0.564  # The performance_ratio compares the achieved min distance to an estimated maximum # metrics$distances$performance_ratio"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/generate_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Optimal Color Palette using Pure Minimax Optimization — generate_palette","title":"Generate Optimal Color Palette using Pure Minimax Optimization — generate_palette","text":"Creates scientifically-grounded color palette maximizes minimum perceptual distance two colors using pure minimax optimization OKLAB color space. Colors automatically sorted brightness can include fixed brand colors.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/generate_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Optimal Color Palette using Pure Minimax Optimization — generate_palette","text":"","code":"generate_palette(   n,   include_colors = NULL,   initialization = c(\"k-means++\", \"harmony\"),   init_lightness_bounds = c(0.2, 0.9),   init_hcl_bounds = list(C = c(40, 80), L = c(50, 80)),   fixed_aesthetic_influence = 0.75,   aesthetic_init_config = NULL,   max_iterations = 1000,   return_metrics = TRUE,   progress = interactive(),   weights = NULL,   optimizer = \"nloptr_cobyla\" )"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/generate_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Optimal Color Palette using Pure Minimax Optimization — generate_palette","text":"n Integer. Total number colors palette. include_colors Character vector. Hex colors must included palette unchanged. Default NULL. initialization Character. Initialization method free colors: \"k-means++\" \"harmony\". Default \"k-means++\". init_lightness_bounds Numeric vector length 2. k-means++ initialization, target lightness (L OKLAB) range initial candidates. Default c(0.2, 0.9). init_hcl_bounds List. harmony-based initialization, target C (Chroma) L (Luminance) ranges initial HCL colors. Default list(C = c(40, 80), L = c(50, 80)). fixed_aesthetic_influence Numeric, 0 1. include_colors provided, controls strongly aesthetic properties influence initialization free colors. 0 = influence, 1 = strong influence. Default 0.75. aesthetic_init_config List. Advanced configuration aesthetic initialization. Use NULL (default) built-defaults. max_iterations Integer. Maximum optimization iterations. Default 1000. return_metrics Logical. Whether return evaluation metrics attributes. Default TRUE. progress Logical. Show progress messages. Default interactive(). weights Named numeric vector. Weights multi-objective optimization. Currently supports c(distance = 1) distance-based optimization. Default NULL (equivalent pure distance optimization). optimizer Character. Optimization algorithm use. Currently supported: \"nloptr_cobyla\" (default) deterministic optimization constraint handling, \"sann\" stochastic simulated annealing (excellent quality perfectly reproducible without seed), \"nlopt_direct\" deterministic global optimization using DIRECT algorithm (best choice scientific reproducibility high quality, though may slower), \"nlopt_neldermead\" derivative-free local optimization using Nelder-Mead simplex algorithm (good alternative COBYLA robust local optimization). framework designed easily support additional optimizers future versions.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/generate_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Optimal Color Palette using Pure Minimax Optimization — generate_palette","text":"character vector hex colors class huerd_palette, automatically sorted brightness (lightness). return_metrics = TRUE, includes evaluation metrics attributes.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/generate_palette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Optimal Color Palette using Pure Minimax Optimization — generate_palette","text":"function implements pure minimax optimization create color palettes maximum worst-case perceptual distinguishability. approach scientifically grounded focuses single, clear objective. process: Initialize free colors using k-means++ harmony-based methods Optimize using box-constrained nloptr maximize minimum perceptual distance Sort final palette OKLAB lightness intuitive ordering Apply gamut compensation brightness sorting pure minimax approach ensures optimal categorical color palettes without complex multi-objective trade-offs. Quality can assessed using evaluate_palette() visualized plot_palette_analysis().","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/generate_palette.html","id":"performance-tips","dir":"Reference","previous_headings":"","what":"Performance Tips","title":"Generate Optimal Color Palette using Pure Minimax Optimization — generate_palette","text":"low performance ratios, try increasing max_iterations Use progress = TRUE monitor optimization convergence Include 2-3 fixed colors maximum best optimization Use diagnostic dashboard plot_palette_analysis() analysis","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/generate_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Optimal Color Palette using Pure Minimax Optimization — generate_palette","text":"","code":"# Simple optimal palette palette <- generate_palette(5, progress = FALSE) print(palette) #>  #> -- huerd Color Palette (5 colors) -- #> Colors: #> [ 1] #002E00 #> [ 2] #0038CF #> [ 3] #FF0076 #> [ 4] #F8A300 #> [ 5] #ACFFBF #>  #> -- Quality Metrics Summary -- #> * Min. Perceptual Distance (OKLAB): 0.238 #> * Optimizer Performance Ratio      : 57.9% #> * Min. CVD-Safe Distance (OKLAB)  : 0.177 #>  #> -- Generation Details -- #> * Optimizer Iterations: 456 #> * Optimizer Status: NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached.  # Brand-constrained palette brand_palette <- generate_palette(   n = 6,   include_colors = c(\"#4A6B8A\", \"#E5A04C\"),   progress = FALSE )  # Using specific optimizer (deterministic) optimizer_palette <- generate_palette(   n = 4,   optimizer = \"nloptr_cobyla\",   progress = FALSE )  # Using simulated annealing (stochastic, excellent quality) set.seed(42)  # For reproducibility sann_palette <- generate_palette(   n = 4,   optimizer = \"sann\",   progress = FALSE )  # Using DIRECT algorithm (deterministic global, best for scientific reproducibility) direct_palette <- generate_palette(   n = 4,   optimizer = \"nlopt_direct\",   progress = FALSE )  # Using Nelder-Mead algorithm (derivative-free local, good alternative to COBYLA) neldermead_palette <- generate_palette(   n = 4,   optimizer = \"nlopt_neldermead\",   progress = FALSE )  # Evaluate quality evaluation <- evaluate_palette(brand_palette) cat(\"Min distance:\", evaluation$distances$min, \"\\n\") #> Min distance: 0.182684  cat(\"Performance:\", evaluation$distances$performance_ratio * 100, \"%\\n\") #> Performance: 49.9774 %  # Comprehensive analysis plot_palette_analysis(brand_palette)"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/huerd-package.html","id":null,"dir":"Reference","previous_headings":"","what":"huerd: Constrained Color Palette Generation with Aesthetic Guidance — huerd-package","title":"huerd: Constrained Color Palette Generation with Aesthetic Guidance — huerd-package","text":"huerd package provides tools generating perceptually distinct color palettes constraints. main feature ability specify fixed colors must included final palette unchanged. Generated colors optimized distinctness CVD safety, can optionally adhere aesthetic \"vibe\" (Lightness Chroma profile) fixed colors.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/huerd-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main Functions","title":"huerd: Constrained Color Palette Generation with Aesthetic Guidance — huerd-package","text":"generate_palette() Generate color palette constraints. evaluate_palette() Evaluate quality color palette. simulate_palette_cvd() Simulate palette appears CVD. is_cvd_safe() Quick check CVD safety threshold.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/huerd-package.html","id":"color-spaces","dir":"Reference","previous_headings":"","what":"Color Spaces","title":"huerd: Constrained Color Palette Generation with Aesthetic Guidance — huerd-package","text":"package uses OK LAB color space default perceptual uniformity. Euclidean distance OK LAB corresponds well perceived color differences. Just Noticeable Difference (JND) OK LAB approximately 0.02.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/huerd-package.html","id":"optimization-method","dir":"Reference","previous_headings":"","what":"Optimization Method","title":"huerd: Constrained Color Palette Generation with Aesthetic Guidance — huerd-package","text":"huerd treats palette generation box-constrained optimization problem, handled nloptr package. goal find arrangement colors maximizes score based perceptual distance, CVD safety, optional penalties aesthetic gamut deviations.","code":""},{"path":[]},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/huerd-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"huerd: Constrained Color Palette Generation with Aesthetic Guidance — huerd-package","text":"Maintainer: Maximilian Scholz dev.scholz@mailbox.org","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/is_cvd_safe.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Palette CVD Safety — is_cvd_safe","title":"Check Palette CVD Safety — is_cvd_safe","text":"Quick check palette's worst-case minimum inter-color distance simulated common CVD conditions meets specified threshold.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/is_cvd_safe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Palette CVD Safety — is_cvd_safe","text":"","code":"is_cvd_safe(colors, min_cvd_distance = 0.08)"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/is_cvd_safe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Palette CVD Safety — is_cvd_safe","text":"colors Character vector hex colors OKLAB matrix. min_cvd_distance Numeric. minimum acceptable perceptual distance (OK LAB space) two colors palette maintain simulated deuteranopia, protanopia, tritanopia. Default 0.08. Recall JND ~0.02.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/is_cvd_safe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Palette CVD Safety — is_cvd_safe","text":"Logical. TRUE palette's worst_case_min_distance evaluate_palette() greater equal min_cvd_distance, FALSE otherwise. Returns TRUE palette fewer 2 colors.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/plot_palette_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Comprehensive Palette Analysis Dashboard — plot_palette_analysis","title":"Comprehensive Palette Analysis Dashboard — plot_palette_analysis","text":"Creates scicomap-inspired comprehensive diagnostic dashboard color palettes using modern grid graphics system robust cross-platform compatibility. function generates six visualization panels help assess palette quality, including perceptual distance analysis, CVD simulation, OKLAB space distribution, performance comparison established scientific palettes.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/plot_palette_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comprehensive Palette Analysis Dashboard — plot_palette_analysis","text":"","code":"plot_palette_analysis(colors, force_font_scale = NULL)"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/plot_palette_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comprehensive Palette Analysis Dashboard — plot_palette_analysis","text":"colors character vector hex colors matrix colors OKLAB space. force_font_scale Allows force specific font scale","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/plot_palette_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comprehensive Palette Analysis Dashboard — plot_palette_analysis","text":"Invisibly returns evaluation result evaluate_palette.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/plot_palette_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comprehensive Palette Analysis Dashboard — plot_palette_analysis","text":"","code":"colors <- c(\"#ff0000\", \"#00ff00\", \"#0000ff\") plot_palette_analysis(colors)"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/print.huerd_evaluation.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for huerd_evaluation Objects — print.huerd_evaluation","title":"Print Method for huerd_evaluation Objects — print.huerd_evaluation","text":"Custom print method evaluation results evaluate_palette.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/print.huerd_evaluation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for huerd_evaluation Objects — print.huerd_evaluation","text":"","code":"# S3 method for class 'huerd_evaluation' print(x, ...)"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/print.huerd_evaluation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for huerd_evaluation Objects — print.huerd_evaluation","text":"x object class huerd_evaluation. ... Additional arguments (used).","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/print.huerd_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for huerd_palette Objects — print.huerd_palette","title":"Print Method for huerd_palette Objects — print.huerd_palette","text":"Custom print method color palettes generated huerd. Displays colors brief summary quality metrics available.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/print.huerd_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for huerd_palette Objects — print.huerd_palette","text":"","code":"# S3 method for class 'huerd_palette' print(x, ...)"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/print.huerd_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for huerd_palette Objects — print.huerd_palette","text":"x object class huerd_palette (character vector hex colors). ... Additional arguments (used).","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/print.huerd_simulation_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for huerd_simulation_result Objects — print.huerd_simulation_result","title":"Print Method for huerd_simulation_result Objects — print.huerd_simulation_result","text":"Custom print method simulation results simulate_palette_cvd.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/print.huerd_simulation_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for huerd_simulation_result Objects — print.huerd_simulation_result","text":"","code":"# S3 method for class 'huerd_simulation_result' print(x, ...)"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/print.huerd_simulation_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for huerd_simulation_result Objects — print.huerd_simulation_result","text":"x object class huerd_simulation_result. ... Additional arguments (used).","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/reproduce_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Reproduce Palette from Existing huerd_palette Object — reproduce_palette","title":"Reproduce Palette from Existing huerd_palette Object — reproduce_palette","text":"Recreates identical color palette previously generated huerd_palette object using stored generation metadata. function enables perfect scientific reproducibility reusing exact parameters random seed used original generation.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/reproduce_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reproduce Palette from Existing huerd_palette Object — reproduce_palette","text":"","code":"reproduce_palette(palette, progress = NULL)"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/reproduce_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reproduce Palette from Existing huerd_palette Object — reproduce_palette","text":"palette huerd_palette object (result generate_palette()) containing generation metadata. progress Logical. Show progress messages. Default interactive(). NULL, uses progress setting original generation.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/reproduce_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reproduce Palette from Existing huerd_palette Object — reproduce_palette","text":"character vector hex colors class huerd_palette, identical input palette reproduction successful.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/reproduce_palette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reproduce Palette from Existing huerd_palette Object — reproduce_palette","text":"function reads generation metadata stored generation_metadata attribute huerd_palette object re-runs generate_palette() exact parameters. random seed captured original generation, reproduction identical. deterministic optimizers like \"nlopt_direct\", reproduction always identical regardless random seed. function validates input object contains necessary metadata provides informative error messages reproduction fails due missing metadata package version incompatibilities. scientific reproducibility, recommended use deterministic optimizers like \"nlopt_direct\" reproducibility critical.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/reproduce_palette.html","id":"compatibility","dir":"Reference","previous_headings":"","what":"Compatibility","title":"Reproduce Palette from Existing huerd_palette Object — reproduce_palette","text":"Reproduction reliable within package version Package version changes may affect reproducibility Missing incomplete metadata prevent reproduction function handles backward compatibility older huerd_palette objects may lack metadata","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/reproduce_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reproduce Palette from Existing huerd_palette Object — reproduce_palette","text":"","code":"if (FALSE) { # \\dontrun{ # Create a reproducible palette set.seed(42) original_palette <- generate_palette(   n = 5,   include_colors = c(\"#FF0000\"),   optimizer = \"nlopt_direct\",   progress = FALSE )  # Reproduce the exact same palette reproduced_palette <- reproduce_palette(original_palette)  # Verify they are identical identical(original_palette, reproduced_palette)  # Examine generation metadata metadata <- attr(original_palette, \"generation_metadata\") str(metadata) } # }"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/simulate_palette_cvd.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Palette Under Color Vision Deficiency — simulate_palette_cvd","title":"Simulate Palette Under Color Vision Deficiency — simulate_palette_cvd","text":"Shows color palette appears individuals different types color vision deficiency using physiologically accurate models farver.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/simulate_palette_cvd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Palette Under Color Vision Deficiency — simulate_palette_cvd","text":"","code":"simulate_palette_cvd(   colors,   cvd_type = c(\"all\", \"protan\", \"deutan\", \"tritan\"),   severity = 1,   plot = FALSE )"},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/simulate_palette_cvd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Palette Under Color Vision Deficiency — simulate_palette_cvd","text":"colors Character vector hex colors. cvd_type Character. Type CVD: \"protan\", \"deutan\", \"tritan\", \"\". Default \"\". severity Numeric. Severity CVD 0 (none) 1 (complete). Default 1.0. plot Logical. Whether plot comparison using base R graphics. Default FALSE.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/simulate_palette_cvd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Palette Under Color Vision Deficiency — simulate_palette_cvd","text":"cvd_type \"\", returns list simulated palettes type (original). Otherwise returns character vector simulated hex colors. output object also inherits huerd_simulation_result.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/reference/simulate_palette_cvd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Palette Under Color Vision Deficiency — simulate_palette_cvd","text":"","code":"palette_ex <- generate_palette(6, progress = FALSE)  # Simulate complete deuteranopia deutan_palette <- simulate_palette_cvd(palette_ex, \"deutan\", severity = 1.0) print(deutan_palette) #>  #> -- huerd CVD Simulation Result (Type: deutan, Severity: 1.00) -- #>   [ 1] #3B3300 #>   [ 2] #0049FC #>   [ 3] #587CC4 #>   [ 4] #A39000 #>   [ 5] #8696C0 #>   [ 6] #C5C7CD  # See all CVD types and plot them if (interactive() && length(palette_ex) > 0) {   all_cvd <- simulate_palette_cvd(palette_ex, \"all\", plot = TRUE) }"},{"path":[]},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"major-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"huerd 0.4.0 (2025-07-06)","text":"Replaced base R graphics grid graphics system. plot_palette_analysis() now uses gridExtra::arrangeGrob() layout. Converted plotting functions return grob objects instead drawing directly.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"huerd 0.4.0 (2025-07-06)","text":"Added reproducibility system palette generation metadata storage. Added hue order reversal detection CVD analysis.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"breaking-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"huerd 0.4.0 (2025-07-06)","text":"Removed new_device, device_width, device_height parameters plot_palette_analysis(). Moved gridExtra Suggests Imports, added grid Imports. Removed helper functions: .create_graphics_device, .is_ragg_available, .is_interactive_ide, calculate_safe_margins.","code":""},{"path":[]},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"new-features-0-3-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"huerd 0.3.1 (2025-07-04)","text":"Added automated font size scaling plot_palette_analysis() automatically adjusts text sizes based device dimensions.","code":""},{"path":[]},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"major-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"huerd 0.3.0 (2025-07-04)","text":"\"nloptr_cobyla\" (default): Deterministic optimization constraint handling \"sann\": Stochastic simulated annealing \"nlopt_direct\": Deterministic global optimization using DIRECT algorithm \"nlopt_neldermead\": Derivative-free local optimization using Nelder-Mead simplex Added automatic font scaling plot_palette_analysis() prevents text overlap --frame issues.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"minor-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"huerd 0.3.0 (2025-07-04)","text":"Added internal utility functions .hex_to_oklab() .oklab_to_hex() eliminate repetitive color conversion patterns. Fixed failing visualization tests added test coverage new utility functions. Updated test files use utility functions.","code":""},{"path":[]},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"minor-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"huerd 0.1.1 (2025-07-01)","text":"Removed unused cli crayon dependencies.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"huerd-010-2025-07-01","dir":"Changelog","previous_headings":"","what":"huerd 0.1.0 (2025-07-01)","title":"huerd 0.1.0 (2025-07-01)","text":"major refactoring simplification huerd, focusing package single, scientifically-grounded objective: pure minimax color palette generation.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"major-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"huerd 0.1.0 (2025-07-01)","text":"Pure minimax optimization: core generate_palette() function streamlined use pure minimax objective, maximizing minimum perceptual distance colors OKLAB space. complex multi-objective parameters (optimize_for, balance_weights, aesthetic_penalty_weights_LC) removed, simplifying API aligning package clear, defensible scientific goal. Comprehensive diagnostic dashboard: new plot_palette_analysis() function added. provides comprehensive, six-panel diagnostic dashboard inspired scicomap -depth palette analysis. feature uses base R graphics introduces zero new dependencies. Automatic brightness sorting: palettes generated generate_palette() now automatically sorted OKLAB lightness value, ensuring intuitive consistent ordering darkest lightest. Simplified evaluation: evaluate_palette() function now pure data provider, returning raw, objective metrics (distances, CVD safety, color distribution) without subjective heuristic scoring.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"minor-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"huerd 0.1.0 (2025-07-01)","text":"is_cvd_safe() function now uses robust evaluate_palette() function calculations. print methods huerd_palette huerd_evaluation updated reflect new, simplified data structures.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"removals-0-1-0","dir":"Changelog","previous_headings":"","what":"Removals","title":"huerd 0.1.0 (2025-07-01)","text":"following experimental non-essential features removed streamline package: Force-field repulsion-based optimization algorithms. Palette animation framework. Algorithm comparison tools. Post-hoc CVD refinement steps. 3D color space visualizations. functionality related CAM16 CIECAM16 color models.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"huerd-003-2025-06-22","dir":"Changelog","previous_headings":"","what":"huerd 0.0.3 (2025-06-22)","title":"huerd 0.0.3 (2025-06-22)","text":"Added post-hoc cvd_adjustment step improve palettes color vision deficiency. Added README.md basic usage instructions.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"huerd-002-2025-01-12","dir":"Changelog","previous_headings":"","what":"huerd 0.0.2 (2025-01-12)","title":"huerd 0.0.2 (2025-01-12)","text":"Switched core optimization algorithm inverse-square law repulsion model. Removed functionality related CIECAM16 color model. Added swatchplot animation feature.","code":""},{"path":"https://sims1253.github.io/huerd/branch/sims/dev/news/index.html","id":"huerd-001-2025-01-04","dir":"Changelog","previous_headings":"","what":"huerd 0.0.1 (2025-01-04)","title":"huerd 0.0.1 (2025-01-04)","text":"Initial release. Core functionality palette generation using CAM16 CIECAM16 color models. Features color space conversion animation optimization process.","code":""}]
